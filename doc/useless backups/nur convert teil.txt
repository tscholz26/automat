ich0 = "{S->0|A0; A->1|2|...|9|A0|A1|...|A9|B1|...|B9; B->+|-}"
ich1 = "{S->0|A0; A->1|2|3|4|5|6|7|8|9|A0|A1|A2|A3|A4|A5|A6|A7|A8|A9|B1|B2|B3|B4|B5|B6|B7|B8|B9; B->+|-}"
loc = "{S->Ba|Aa; A->a|Aa|Sb; B->b|Ab}"
nils = "{S->aS|aA; A->aA|3D;D->aS|6A|6D|3A}"
luisa = "{S->1A|0B|0; A->1A|0A; B->1B|0S|1|0}"
fabi = "{S->0S|1S|0A; A->0B; B->0C|0; C->0C|1C|0|1}"
marc = "{N->aA|bA; A->aA|bB|c; B->bB|c}"
tristan = "{S->0S|1A|1; A->0B|1A|0|1; B->0S|1A|1}"

def convert(r):
    Np = ["A","B","C","D","E","F","G","G","S"]
    global N
    N = []
    Tp = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","+","-"]
    global T
    T = []
    R = []
    S = str
    #klammern entfernen
    r = r[r.index("{")+1:r.index("}")]
    print("klammern entfernt\nr: " + r + "\n")

    #leerzeichen filtern
    i = 0
    while i < len(r):    
        if r[i] == " ":
            r = r[0:i] + r[i+1:]
        i = i + 1
    print("leerzeichen gefiltert: " + r + "\n")
    
    i = 0
    while i < len(r):
        if r[i] == "-":
            if i < len(r)-1:
                if r[i+1] == ">":
                    r = r[:i] + "$" + r[i+2:]
                    i = 0
        i = i + 1
    print("pfeil ersetzt: " + r + "\n")

    #N, T und S bestimmen
    for i in range(0,len(r)):
        if r[i] in Np:
            if not r[i] in N:
                N.append(r[i])
        if r[i] in Tp:
            if not r[i] in T:
                T.append(r[i])
    S = r[0]
    
    print("Startzustand: " + S)
    print("N: " + str(N))
    print("T: " + str(T))  
    #regeln seperieren
    i = 0
    while i < len(r):    
        if r[i] == ";":
            newrule = r[0:i]
            R.append(newrule)
            #print("newrule: " + newrule)
            r = r[i+1:]
        i = i + 1
    R.append(r)
    print("regelmenge: " + str(R) + "\n")

    #durch | getrennte regeln vereinzeln
    rulelist =  []
    for rule in R:
        i = 0
        while i < len(rule):
            if rule[i] == "|":
                singlerule = rule[0:i]
                rulelist.append(singlerule)
                #print("singlerule: " + singlerule)
                rule = rule[0:rule.index("$")+1] + rule[i+1:]
                #print("new R part: " + str(rule))
                i = 0
            i = i + 1
        rulelist.append(rule)
        #print("new singlerule: " + rule)
    print("regeln vereinzelt: " + str(rulelist) + "\n")

    #nea erstellen
    global statelist
    statelist = []
    global nea
    nea = []
    neanamelist = []
    global dea
    dea = []
    finallist = []
    #statecount = 0
    for rule in rulelist:
        left = rule[:rule.index("$")]
        right = rule[rule.index("$")+1:]
        item = str
        final = 1
        for i in range(0,len(right)):
            if right[i] in N:
                final = 0
            if right[i] in T:
                item = right[i]
                if final == 0:
                    right = right[:i]+ right[i+1:]
                else:
                    right = left + "_final"
                    if right not in finallist:
                        finallist.append(right)
        outcomes = []
        outcomes.append(right)
        alphabet = []
        alphabet.append(item)
        #newstate = State(left, outcomes, alphabet, 100, 100, final)
        #print("nea final: " + str(final))
        newstate = State(left, outcomes, alphabet, 100, 100, 0)
        statelist.append(newstate)
        #zu nea hinzufÃ¼gen, wenn es noch keinen mit gleichem name gibt
        if not newstate.name() in neanamelist:
            nea.append(newstate)
            neanamelist.append(newstate.name())
    for state in statelist:
        i = 0
        while i < len(nea):
            neastate = nea[i]
            if (state.name() == neastate.name()):
                if not state == neastate:
                    neastate.addoutcome(state.getoutcomes()[0])
                    neastate.additem(state.getalphabet()[0])
            #nea[i] = neastate
            i = i + 1
    for finalstate in finallist:
        nea.append(State(finalstate, [], [], 100, 100, 1))

    global deastatelist
    global startval
    deastatelist = []
    dea = neatodea(nea)+nea
    showdea()
    for state in dea:
        if state.name() == "S":
            startstate = state
    
    return(dea,startstate)

def neatodea(nea):
    completeamb = 0
    global deastatelist
    global meltlist
    meltlist = []
    for state in nea:
        ambig = 0
        for i in range(0,len(state.getalphabet())):
            for j in range(0,len(state.getalphabet())):
                if state.getalphabet()[i] == state.getalphabet()[j]:
                    if i < j:
                        namei = state.getoutcomes()[i]
                        namej = state.getoutcomes()[j]
                        ambig = 1
                        completeamb = 1
                        newstate = namei+"|"+namej
                        if newstate not in meltlist:
                            meltlist.append(newstate)
                            print("added item: " + newstate)
            """
                        for zst in nea:
                                #print("name: " + zst.name())
                                if state.getoutcomes()[i] == zst.name():
                                    statei = zst
                                if state.getoutcomes()[j] == zst.name():
                                    statej = zst
            """
    if ambig == 0:
        deastatelist.append(state)
    print("meltlist0: " + str(meltlist))
    while len(meltlist) > 0:
        #melt(meltlist[0])
        melt()
    return(deastatelist)

def melt():
    global nea
    global deastatelist
    global meltlist
    global T

    alph = []
    outc = []

    startname = meltlist[0]
    meltlist = meltlist[1:]
    #print("prepare melting: " + startname)
    #print(meltlist)
    names = []
    while len(startname) > 0:
        barfound = 0
        i = 0
        while i < len(startname):
            if startname[i] == "|":
                names.append(startname[:i])
                startname = startname[i+1:]
                barfound = 1
            i = i + 1
        if barfound == 0:
            names.append(startname)
            startname = ""
    #print("names: " + str(names))

    partcount = len(names)

    states = []
    for i in range(0,partcount):
        states.append("")
        
    for i in range(0,partcount):
        for state in nea:
            if state.name() == names[i]:
                states[i] = state

    statesname = ""
    statesnamebars = ""
    for i in names:
        statesname = statesname + i
        if statesnamebars == "":
            statesnamebars = i
        else:
            statesnamebars = statesnamebars + "|" + i

    print(statesname)

    alphabet = []
    for state in states:
        for i in range(0,len(state.getalphabet())):
            if state.getalphabet()[i] not in alphabet:
                alphabet.append(state.getalphabet()[i])
    #print("alphabet gesamt: " + str(alphabet))

    final = 0
    for state in states:
        if state.final() == 1:
            final = 1
    #print("final: " + str(final))

    """
    for item in alphabet:
        outcomes = []
        outcomeitemlist = []
        for state in states:
            for i in range(0,len(state.getalphabet())):
                if state.getalphabet()[i] == item:
                    outcomepart = state.getoutcomes()[i]
                    #if outcomepart not in outcomeitemlist:
                    if 1 == 1:
                        outcomeitemlist.append(outcomepart)
        #zusammensetzen
        outcomeitem = ""
        outcomeitembars = ""
        for symbol in outcomeitemlist:
            outcomeitem = outcomeitem + symbol
            if outcomeitembars == "":
                outcomeitembars = symbol
            else:
                outcomeitembars = outcomeitembars + "|" + symbol
        outcomes.append(outcomeitem)
    print("outcomes: " + str(outcomes))
    """
    for item in T:
        itemused = 0
        outcomeparts = []
        outcomename = ""
        outcomenamebars = ""
        for state in states:
            for i in range(0,len(state.getalphabet())):
                if state.getalphabet()[i] == item:
                    itemused = 1
                    outcomename = outcomename + state.getoutcomes()[i]
                    if outcomenamebars == "":
                        outcomenamebars = state.getoutcomes()[i]
                    else:
                        outcomenamebars = outcomenamebars + "|" + state.getoutcomes()[i]

                        seenstate = 0
                        for deastate in deastatelist:
                            #print("deastate: " + str(deastate.name()))
                            #print("outcstate: " + str(outcomename))
                            if deastate.name() == outcomename:
                                seenstate = 1
                        if seenstate == 0:
                            if not (outcomenamebars in meltlist):
                                meltlist.append(outcomenamebars)
                        
        #print(outcomename)
        if itemused == 1:
            alph.append(item)
            outc.append(outcomename)
    #print(alph)
    #print(outc)
    newstate = State(statesname, outc, alph, 100, 100, final)
    deastatelist.append(newstate)
    #print("DEA len: " + str(len(deastatelist)))
    
def shownea():
    global nea
    for n in range(0,len(nea)):
        print("\n" + nea[n].name())
        print(nea[n].getoutcomes())
        print(nea[n].getalphabet())

def showdea():
    global deastatelist
    for n in range(0,len(deastatelist)):
        print("\n" + deastatelist[n].name())
        print(deastatelist[n].getoutcomes())
        print(deastatelist[n].getalphabet())